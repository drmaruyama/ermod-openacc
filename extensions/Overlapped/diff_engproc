--- engproc.F90	2020-08-21 22:21:55.079412279 +0900
+++ extensions/Intermediate/engproc.F90	2020-08-21 22:33:59.018316685 +0900
@@ -30,6 +30,15 @@
   logical, allocatable :: flceng_stored(:)
   real, allocatable :: flceng(:, :)
 
+  ! start of the extension for the method with the intermediate state
+  integer :: do_intermediate
+  character(len=1024) :: refs_filename = '../refs/engref'
+  logical, dimension(:), allocatable :: zerodns_crd
+  real, dimension(:),    allocatable :: edintm, uvintm
+  real, dimension(:,:),  allocatable :: avintm
+  real :: soln_total, soln_intm, norm_intm
+  ! end of the extension for the method with the intermediate state
+
 contains
   !
   !  procedure for constructing energy distribution functions
@@ -66,6 +75,14 @@
     !
     integer :: param_err
     logical :: check_ok, start_line
+    ! start of the extension for the method with the intermediate state
+    logical :: edens_exist
+    character(len=1024) :: opnfile
+    integer, parameter :: sufmax = 99, refs_io = 81
+    character(len=3), parameter :: default_suf = '.tt'
+    character(len=3) :: count_suf
+    namelist /intermediate/ do_intermediate, refs_filename
+    ! end of the extension for the method with the intermediate state
     namelist /hist/ ecdmin, ecfmns, ecdcen, eccore, ecdmax, &
                     eclbin, ecfbin, ec0bin, finfac, pecore, &
                     ecprread, meshread, peread
@@ -302,6 +319,48 @@
     enddo
     voffset = -infty
 
+    ! start of the extension for the method with the intermediate state
+    do_intermediate = NO                 ! default = don't do it
+    if(slttype == SLT_SOLN) then
+       open(unit = io_paramfile, file = ene_confname, action = "read", iostat = param_err)
+       if(param_err == 0) then
+          read(io_paramfile, nml = intermediate)
+          close(io_paramfile)
+       endif
+       if(do_intermediate == YES) then
+          allocate( zerodns_crd(ermax), edintm(ermax) )
+          allocate( avintm(engdiv, numslv), uvintm(numslv) )
+          zerodns_crd(:) = .true.
+          soln_total = 0.0
+          soln_intm = 0.0
+          opnfile = trim(refs_filename) // default_suf
+          inquire(file = opnfile, exist = edens_exist)
+          if( edens_exist ) then
+             regn = 1
+          else
+             regn = sufmax
+          endif
+          do pti = 1, regn
+             if(regn == sufmax) then
+                i = pti / 10
+                q = mod(pti, 10)
+                count_suf = '.' // numbers(i+1:i+1) // numbers(q+1:q+1)
+                opnfile = trim(refs_filename) // count_suf
+                inquire(file = opnfile, exist = edens_exist)
+             endif
+             if( edens_exist ) then
+                open(unit = refs_io, file = opnfile, action = "read")
+                do iduv = 1, ermax
+                   read(refs_io, *) factor, i, factor
+                   if(factor > tiny) zerodns_crd(iduv) = .false.
+                enddo
+                close(refs_io)
+             endif
+          enddo
+       endif
+    endif
+    ! end of the extension for the method with the intermediate state
+
     call engclear
 
     ! Output for energy fluctuation
@@ -329,6 +388,13 @@
     avslf = 0.0
     engnorm = 0.0
     engsmpl = 0.0
+    ! start of the extension for the method with the intermediate state
+    if(do_intermediate == YES) then
+       edintm(:) = 0.0
+       uvintm(:) = 0.0
+       norm_intm = 0.0
+    endif
+    ! end of the extension for the method with the intermediate state
     return
   end subroutine engclear
 
@@ -517,6 +583,7 @@
     integer, parameter :: ave_io = 54, wgt_io = 55, uvr_io = 56
     real :: voffset_local, voffset_scale
     real :: factor
+    integer, parameter :: prb_io = 81  ! extension with the intermediate state
     call mpi_rank_size_info                                          ! MPI
 
     ! synchronize voffset
@@ -574,6 +641,67 @@
 #endif
     endif
 
+    ! start of the extension for the method with the intermediate state
+    if(do_intermediate == YES) then
+#ifdef MPI
+       if(wgtslf == YES) then
+          soln_total = soln_total * voffset_scale
+          soln_intm = soln_intm * voffset_scale
+          norm_intm = norm_intm * voffset_scale
+          edintm(:) = edintm(:) * voffset_scale
+          uvintm(:) = uvintm(:) * voffset_scale
+       endif
+
+       call mympi_reduce_real_scalar(norm_intm, mpi_sum, 0)
+       call mympi_reduce_real_array(uvintm, numslv, mpi_sum, 0)
+       call mympi_reduce_real_array(edintm, ermax, mpi_sum, 0)
+       if(division == engdiv) then
+          call mympi_reduce_real_scalar(soln_total, mpi_sum, 0)
+          call mympi_reduce_real_scalar(soln_intm, mpi_sum, 0)
+       endif
+#endif
+       if(myrank == 0) then
+          if(engdiv == 1) then
+             suffeng = '.tt'
+          else
+             j = division / 10
+             k = mod(division, 10)
+             suffeng = '.' // numbers(j+1:j+1) // numbers(k+1:k+1)
+          endif
+
+          edintm(:) = edintm(:) / norm_intm
+
+          engfile = 'engint' // suffeng
+          open(unit = eng_io, file = engfile, form = "FORMATTED", action = 'write')
+          do iduv = 1, ermax
+             call repval('intn', iduv, factor, pti)
+             write(eng_io, '(g15.7,i5,g25.15)') factor, pti, edintm(iduv)
+          enddo
+          endfile(eng_io)
+          close(eng_io)
+
+          avintm(division, :) = uvintm(:) / norm_intm
+
+          if(division == engdiv) then
+             factor = soln_intm / soln_total
+             open(unit = prb_io, file = 'Prob_Result', action = 'write')
+             write(prb_io, '(a,f12.6)') ' Probability to find the system in the intermediate state = ', factor
+             write(prb_io, '(a)') ' Free-energy change from the intermediate state to the simulated state'
+             write(prb_io, '(a,f12.6,a)') '                                                = ', temp * log(factor), ' kcal/mol'
+             endfile(prb_io)
+             close(prb_io)
+
+             open(unit = ave_io, file = 'avint.tt', action = 'write')
+             do k = 1, engdiv
+                write(ave_io, 751) k, avintm(k, 1:numslv)
+             enddo
+             endfile(ave_io)
+             close(ave_io)
+          endif
+       endif
+    endif
+    ! end of the extension for the method with the intermediate state
+
     if(myrank /= 0) return                                            ! MPI
     ! data to be stored; only the master node matters
 
@@ -877,6 +1005,22 @@
        enddo
     endif
 
+    ! start of the extension for the method with the intermediate state
+    if(do_intermediate == YES) then
+       soln_total = soln_total + engnmfc
+       if(any( (insdst(:) > 0) .and. (zerodns_crd(:)) )) then
+       else
+          soln_intm = soln_intm + engnmfc
+          norm_intm = norm_intm + engnmfc
+          do iduv = 1, ermax
+             k = insdst(iduv)
+             if(k > 0) edintm(iduv) = edintm(iduv) + engnmfc * real(k)
+          enddo
+          uvintm(:) = uvintm(:) + flceng(:, cntdst) * engnmfc
+       endif
+    endif
+    ! end of the extension for the method with the intermediate state
+
     deallocate( insdst )
   end subroutine update_histogram
 
